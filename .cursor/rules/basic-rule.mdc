---
description: 
globs: 
alwaysApply: false
---
# AI와 협업을 위한 규칙

## 목표
- chat이 연속으로 이어지는 모양의 채팅 UI 라이브러리를 만들고 npm으로 배포합니다.
- [agenda.md](mdc:agenda.md)의 내용에 따라 개발 목표 및 진척도를 확인합니다.

## 라이브러리
- `pnpm`을 사용하여 패키지를 관리합니다.
- `typescript`를 사용합니다.
- 필요시 외부 라이브러리를 사용해도 되지만, 검증된 라이브러리 위주로 사용해주세요

## 번들링
- `Webpack`을 사용하여 번들링을 수행합니다.
- 코드 스플리팅을 통해 성능을 최적화하고, 필요에 따라 `Babel`을 사용하여 최신 JavaScript 기능을 지원합니다.
- cjs 및 ㅡ

## 테스트 코드 라이브러리
- `Jest`와 `React Testing Library`를 사용하여 단위 테스트를 작성합니다.
- `Cypress`를 사용하여 통합 테스트를 수행합니다.
- 모든 주요 기능에 대해 테스트를 작성하고, 테스트 커버리지를 80% 이상 유지합니다.

## 스타일 가이드
- [style.md](mdc:style.md)에 정의된 디자인 가이드를 따르며, 반복적인 디자인 패턴을 토큰을 정의하는 파일을 별도로 만들어 관리합니다.
- `CSS-in-JS` 라이브러리인 `styled-components`를 사용하여 스타일을 관리합니다.
- 반응형 디자인을 고려하여 모바일, 태블릿, 데스크탑 환경에서 최적의 사용자 경험을 제공합니다.

## 코드 품질
- `ESLint`와 `Prettier`를 사용하여 코드 스타일을 일관되게 유지합니다.
- 코드 리뷰를 통해 코드 품질을 지속적으로 개선합니다.
- Atomic한 컴포넌트 설계를 지향합니다.
- 관심사 분리를 철저히 해주세요.

## 문서화
- 모든 주요 기능과 API에 대해 문서화를 철저히 합니다.
- `README.md`와 사용자 가이드를 통해 프로젝트의 사용법과 설치 방법을 명확히 설명합니다.
